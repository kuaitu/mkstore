package com.mkstore.mk.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class MkPlatformUserRoleExample {
    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by JoinPlugin
     * Name of the database table represented by this class
     */
    public static final String TABLE = "mk_platform_user_role";

    /**
     * This field was generated by JoinPlugin
     * SQL query alias of the database table represented by this class
     */
    public static final String ALIAS = "mk_platform_user_role";

    /**
     * This field was generated by JoinPlugin
     * SQL query alias of the database table represented by this class
     */
    public static final String ALIAS_ = "mk_platform_user_role.";

    private List<String> from;

    private Integer limit;

    private Integer offset;

    public MkPlatformUserRoleExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    public void clear() {
        from = null;
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    public List<String> getFrom() {
        return from;
    }

    public MkPlatformUserRoleExample addFromClause(String join) {
        if (join == null || (join = join.trim()).length() == 0) return this;
        if (from == null) from = new java.util.ArrayList<String>();
        from.add(join);
        return this;
    }

    /**
     * @param formatString A {@link java.util.Formatter format string} for join expression
     * @param firstArg First argument referenced by the format specifiers in the format string
     * @param secondAndFurtherArgs Second and further arguments referenced by the format specifiers in the format string
     */
    public MkPlatformUserRoleExample addFromClause(String formatString, Object firstArg, Object ... secondAndFurtherArgs) {
        if (formatString == null || (formatString = formatString.trim()).length() == 0) return this;
        if (from == null) from = new java.util.ArrayList<String>();
        Object[] temp = new Object[(secondAndFurtherArgs == null ? 0 : secondAndFurtherArgs.length) + 1];
        if (secondAndFurtherArgs != null) System.arraycopy(secondAndFurtherArgs, 0, temp, 1, secondAndFurtherArgs.length);
        temp[0] = firstArg;
        String formatted = String.format(formatString, temp);
        from.add(formatted);
        return this;
    }

    public Integer getLimit() {
        return limit;
    }

    public Integer getOffset() {
        return offset;
    }

    public MkPlatformUserRoleExample setLimitAndOffset(Integer limit, Integer offset) {
        if (limit != null && limit > 0) {
            this.limit = limit;
            this.offset = (offset != null && offset > 0) ? offset : null;
        } else {
            this.limit = this.offset = null;
        }
        return this;
    }

    public MkPlatformUserRoleExample setLimit(Integer limit) {
        return setLimitAndOffset(limit, null);
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andUserRoleIdIsNull() {
            addCriterion("mk_platform_user_role.user_role_id is null");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdIsNotNull() {
            addCriterion("mk_platform_user_role.user_role_id is not null");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_role_id =", value, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdNotEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_role_id <>", value, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdGreaterThan(Integer value) {
            addCriterion("mk_platform_user_role.user_role_id >", value, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_role_id >=", value, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdLessThan(Integer value) {
            addCriterion("mk_platform_user_role.user_role_id <", value, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdLessThanOrEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_role_id <=", value, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdIn(List<Integer> values) {
            addCriterion("mk_platform_user_role.user_role_id in", values, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdNotIn(List<Integer> values) {
            addCriterion("mk_platform_user_role.user_role_id not in", values, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdBetween(Integer value1, Integer value2) {
            addCriterion("mk_platform_user_role.user_role_id between", value1, value2, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserRoleIdNotBetween(Integer value1, Integer value2) {
            addCriterion("mk_platform_user_role.user_role_id not between", value1, value2, "userRoleId");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNull() {
            addCriterion("mk_platform_user_role.user_id is null");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNotNull() {
            addCriterion("mk_platform_user_role.user_id is not null");
            return (Criteria) this;
        }

        public Criteria andUserIdEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_id =", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_id <>", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThan(Integer value) {
            addCriterion("mk_platform_user_role.user_id >", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_id >=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThan(Integer value) {
            addCriterion("mk_platform_user_role.user_id <", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThanOrEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.user_id <=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdIn(List<Integer> values) {
            addCriterion("mk_platform_user_role.user_id in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotIn(List<Integer> values) {
            addCriterion("mk_platform_user_role.user_id not in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdBetween(Integer value1, Integer value2) {
            addCriterion("mk_platform_user_role.user_id between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotBetween(Integer value1, Integer value2) {
            addCriterion("mk_platform_user_role.user_id not between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andRoleIdIsNull() {
            addCriterion("mk_platform_user_role.role_id is null");
            return (Criteria) this;
        }

        public Criteria andRoleIdIsNotNull() {
            addCriterion("mk_platform_user_role.role_id is not null");
            return (Criteria) this;
        }

        public Criteria andRoleIdEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.role_id =", value, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdNotEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.role_id <>", value, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdGreaterThan(Integer value) {
            addCriterion("mk_platform_user_role.role_id >", value, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.role_id >=", value, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdLessThan(Integer value) {
            addCriterion("mk_platform_user_role.role_id <", value, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdLessThanOrEqualTo(Integer value) {
            addCriterion("mk_platform_user_role.role_id <=", value, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdIn(List<Integer> values) {
            addCriterion("mk_platform_user_role.role_id in", values, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdNotIn(List<Integer> values) {
            addCriterion("mk_platform_user_role.role_id not in", values, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdBetween(Integer value1, Integer value2) {
            addCriterion("mk_platform_user_role.role_id between", value1, value2, "roleId");
            return (Criteria) this;
        }

        public Criteria andRoleIdNotBetween(Integer value1, Integer value2) {
            addCriterion("mk_platform_user_role.role_id not between", value1, value2, "roleId");
            return (Criteria) this;
        }

        public Criteria andEqualTo(String field, Object value) {
            if (value == null) return andIsNull(field);
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            addCriterion(field+" = ", value, field);
            return (Criteria)this;
        }

        public Criteria andNotEqualTo(String field, Object value) {
            if (value == null) return andIsNotNull(field);
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            addCriterion(field+" <> ", value, field);
            return (Criteria)this;
        }

        public Criteria andIsNull(String field) {
            addCriterion(field+" is null");
            return (Criteria)this;
        }

        public Criteria andIsNotNull(String field) {
            addCriterion(field+" is not null");
            return (Criteria)this;
        }

        public Criteria and(String condition) {
            addCriterion(condition);
            return (Criteria)this;
        }

        private List<Integer> arrayOfIntToListOfInteger(int[] values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (int i : values) list.add(i);
            return list;
        }

        private List<Integer> arrayOfLongToListOfInteger(long[] values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (long i : values) if (i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE) list.add((int)i);
            return list;
        }

        private List<Integer> arrayOfNumberToListOfInteger(Number[] values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (Number i : values) if (i != null && i.longValue() >= Integer.MIN_VALUE && i.longValue() <= Integer.MAX_VALUE) list.add(i.intValue());
            return list;
        }

        private List<Integer> setOfNumberToListOfInteger(Set<? extends Number> values) {
            List<Integer> list = new ArrayList<Integer>();
            if (values != null) for (Number i : values) if (i != null && i.longValue() >= Integer.MIN_VALUE && i.longValue() <= Integer.MAX_VALUE) list.add(i.intValue());
            return list;
        }

        public Criteria andUserRoleIdIn(int[] values) {
            return andUserRoleIdIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andUserRoleIdIn(long[] values) {
            return andUserRoleIdIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andUserRoleIdIn(Number[] values) {
            return andUserRoleIdIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andUserRoleIdIn(Set<? extends Number> values) {
            return andUserRoleIdIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andUserRoleIdNotIn(int[] values) {
            return andUserRoleIdNotIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andUserRoleIdNotIn(long[] values) {
            return andUserRoleIdNotIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andUserRoleIdNotIn(Number[] values) {
            return andUserRoleIdNotIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andUserRoleIdNotIn(Set<? extends Number> values) {
            return andUserRoleIdNotIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andUserIdIn(int[] values) {
            return andUserIdIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andUserIdIn(long[] values) {
            return andUserIdIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andUserIdIn(Number[] values) {
            return andUserIdIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andUserIdIn(Set<? extends Number> values) {
            return andUserIdIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andUserIdNotIn(int[] values) {
            return andUserIdNotIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andUserIdNotIn(long[] values) {
            return andUserIdNotIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andUserIdNotIn(Number[] values) {
            return andUserIdNotIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andUserIdNotIn(Set<? extends Number> values) {
            return andUserIdNotIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andRoleIdIn(int[] values) {
            return andRoleIdIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andRoleIdIn(long[] values) {
            return andRoleIdIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andRoleIdIn(Number[] values) {
            return andRoleIdIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andRoleIdIn(Set<? extends Number> values) {
            return andRoleIdIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andRoleIdNotIn(int[] values) {
            return andRoleIdNotIn(arrayOfIntToListOfInteger(values));
        }

        public Criteria andRoleIdNotIn(long[] values) {
            return andRoleIdNotIn(arrayOfLongToListOfInteger(values));
        }

        public Criteria andRoleIdNotIn(Number[] values) {
            return andRoleIdNotIn(arrayOfNumberToListOfInteger(values));
        }

        public Criteria andRoleIdNotIn(Set<? extends Number> values) {
            return andRoleIdNotIn(setOfNumberToListOfInteger(values));
        }

        public Criteria andIf(String field, String operator, Object value) {
            return andIf(field, operator, value, null, null);
        }

        public Criteria andIf(String field, String operator, Object value, String beforeValue, String afterValue) {
            if (field == null || field.trim().length() == 0) { field = "null"; }
            if (operator == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".operator */ "); return (Criteria)this; }
            if (value == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".value */ "); return (Criteria)this; }
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            String condition = field + " "+operator+" ";
            Criterion c = new Criterion(condition, value);
            if (beforeValue != null) c.beforeValue = beforeValue;
            if (afterValue != null) c.afterValue = afterValue;
            criteria.add(c);
            return (Criteria)this;
        }

        public Criteria andRightIf(Object value, String operator, String field) {
            return andRightIf(value, operator, field, null, null);
        }

        public Criteria andRightIf(Object value, String operator, String field, String beforeValue, String afterValue) {
            if (field == null || field.trim().length() == 0) { field = "null"; }
            if (operator == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".operator */ "); return (Criteria)this; }
            if (value == null) { addCriterion("1=2 /* "+field.replaceAll("[^0-9A-Za-z _.()]","")+".value */ "); return (Criteria)this; }
            if (value instanceof java.util.Date) value = new java.sql.Date(((java.util.Date)value).getTime());
            String condition = " "+operator+" "+field;
            Criterion c = new Criterion(condition, value);
            if (beforeValue != null) c.beforeValue = beforeValue;
            if (afterValue != null) c.afterValue = afterValue;
            c.rightValue = true;
            criteria.add(c);
            return (Criteria)this;
        }
    }

    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        private String afterValue = "";

        private String beforeValue = "";

        private boolean rightValue;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }

        public String getAfterValue() {
            return afterValue;
        }

        public String getBeforeValue() {
            return beforeValue;
        }

        public boolean isRightValue() {
            return rightValue;
        }
    }
}